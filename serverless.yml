# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: lambda-image-converter

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs8.10
  region: ap-northeast-1
  stage: ${opt:stage, 'dev'}
  role: arn:aws:iam::416267771023:role/service-role/lambda-image-converter
  deploymentBucket: lambda-funcs-deployed-by-serverless

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can add packaging information here
package:
#  include:
#    - include-me.js
#    - include-me-dir/**
  exclude:
    - .git
    - .gitignore
    - .node-version
    - README.md
    - .prettierrc
    - .eslintrc

custom:
  stageVariables:
    bucket: ${opt:stage, 'dev'}-media.lambda

functions:
  lambdaImageConverter:
    handler: handler.lambdaImageConverter
    name: ${self:provider.stage}-lambda-image-converter
    timeout: 30
    events:
      - http:
          path: /bands/{bandId}/{filename+}
          method: get
          integration: lambda
          request:
            template:
              image/jpeg: '{ "bucket": "$stageVariables.bucket", "bandId": "$input.params("bandId")", "w": "$input.params("w")", "filename": "$input.params("filename")" }'

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
